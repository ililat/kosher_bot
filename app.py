import logging
from telebot import TeleBot, types
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
import os
from dotenv import load_dotenv
import openai
from sql import safe_db_execute
from validatephone import validate_phone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
openai.api_base = "https://openrouter.ai/api/v1"
openai.api_key = os.getenv("OPENROUTER_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = StateMemoryStorage()
bot = TeleBot(os.getenv('TELEGRAM_TOKEN'), state_storage=storage)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class DialogStates(StatesGroup):
    waiting_for_lesson = State()
    waiting_for_roots = State()
    waiting_for_goods = State()
    waiting_for_commandments = State()


def generate_ai_response(prompt, context=""):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenAI API"""
    try:
        messages = [{
            "role": "system",
            "content": "–¢—ã –º—É–¥—Ä—ã–π —Ä–∞–≤–≤–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –µ–≤—Ä–µ–π—Å–∫–∏—Ö —Ç—Ä–∞–¥–∏—Ü–∏—è—Ö."
        }]

        if context:
            messages.append({"role": "assistant", "content": context})

        messages.append({"role": "user", "content": prompt})

        response = openai.ChatCompletion.create(
            model="openai/gpt-3.5-turbo",
            messages=messages,
            max_tokens=1000,
            temperature=0.7
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {str(e)}")
        return "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å–µ–π—á–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


@bot.message_handler(commands=['start'])
def start(message):
    try:
        bot.delete_state(message.from_user.id, message.chat.id)

        markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton('üìñ –£—Ä–æ–∫–∏ –¢–æ—Ä—ã', callback_data='lessons'),
            types.InlineKeyboardButton('üå≥ –ü–æ–∏—Å–∫ –∫–æ—Ä–Ω–µ–π', callback_data='roots_help'),
            types.InlineKeyboardButton('üõçÔ∏è –ï–≤—Ä–µ–π—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã', callback_data='jewish_goods'),
            types.InlineKeyboardButton('‚ùì –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –µ–≤—Ä–µ–π—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º', callback_data='commandments_help')
        ]
        markup.add(*buttons)

        welcome_msg = """
        ‚ú°Ô∏è *–®–∞–ª–æ–º!* ‚ú°Ô∏è

–Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –µ–≤—Ä–µ–π—Å–∫–∏–º —Ç—Ä–∞–¥–∏—Ü–∏—è–º. 
–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?

–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:
        """

        bot.send_message(
            chat_id=message.chat.id,
            text=welcome_msg,
            reply_markup=markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è *–û—à–∏–±–∫–∞!* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode='Markdown')


@bot.message_handler(commands=['help'])
def help(message):
    try:
        help_msg = """
        üÜò *–ü–æ–º–æ—â—å*

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:
1. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É
2. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º @support_username
3. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!

–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üôè
        """
        bot.send_message(message.chat.id, help_msg)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /help: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è *–û—à–∏–±–∫–∞!* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode='Markdown')


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        if call.data == 'lessons':
            markup = types.InlineKeyboardMarkup()
            btn = types.InlineKeyboardButton(
                "‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —É—Ä–æ–∫–∞–º",
                url="https://example.com/torah-lessons"
            )
            markup.add(btn)
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üìö *–£—Ä–æ–∫–∏ –¢–æ—Ä—ã*\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É—Ä–æ–∫–∞–º:",
                reply_markup=markup,
                parse_mode='Markdown'
            )

        elif call.data == 'roots_help':
            bot.set_state(call.from_user.id, DialogStates.waiting_for_roots, call.message.chat.id)
            roots_msg = """
            üå≥ *–ü–æ–∏—Å–∫ –µ–≤—Ä–µ–π—Å–∫–∏—Ö –∫–æ—Ä–Ω–µ–π*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
*–ò–º—è –ù–æ–º–µ—Ä–¢–µ–ª–µ—Ñ–æ–Ω–∞*

–ü—Ä–∏–º–µ—Ä: 
–ú–æ—à–µ 89161234567 –∏–ª–∏ –î–∞–≤–∏–¥ +79161234567

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.
            """
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=roots_msg,
                parse_mode='Markdown'
            )

        elif call.data == 'jewish_goods':
            markup = types.InlineKeyboardMarkup()
            btn = types.InlineKeyboardButton(
                "üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω",
                url="https://example.com/jewish-goods"
            )
            markup.add(btn)
            goods_msg = """
            üõçÔ∏è *–ï–≤—Ä–µ–π—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã*

–ö–∞–∂–¥—ã–π –µ–≤—Ä–µ–π –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å:
- –ö–∏–ø—ã
- –¢–∞–ª–∏—Ç—ã
- –ú–µ–∑—É–∑—ã
- –•–∞–Ω—É–∫–∏–∏
- –ò –¥—Ä—É–≥–∏–µ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω:
            """
            bot.send_message(
                call.message.chat.id,
                text=goods_msg,
                reply_markup=markup,
                parse_mode='Markdown'
            )

        elif call.data == 'commandments_help':
            bot.set_state(call.from_user.id, DialogStates.waiting_for_commandments, call.message.chat.id)
            commandments_msg = """
            ‚ú°Ô∏è *–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –µ–≤—Ä–µ–π—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º*

–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–æ, –∏ –Ω–∞—à –º—É–¥—Ä–µ—Ü –¥–∞—Å—Ç –≤–∞–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–∞–¥–∏—Ü–∏—è–º.

–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
- –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å —à–∞–±–±–∞—Ç?
- –ö–∞–∫–∏–µ –µ—Å—Ç—å –∑–∞–∫–æ–Ω—ã –∫–∞—à—Ä—É—Ç–∞?
- –ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –µ–≤—Ä–µ–π—Å–∫—É—é —Å–≤–∞–¥—å–±—É?
            """
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=commandments_msg,
                parse_mode='Markdown'
            )

        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ callback: {str(e)}")
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è *–û—à–∏–±–∫–∞!* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode='Markdown')

def is_state(message, state_class):
    current_state = bot.get_state(message.from_user.id, message.chat.id)
    return current_state == state_class.name

@bot.message_handler(func=lambda message: is_state(message, DialogStates.waiting_for_roots))
def process_roots(message):
    try:
        parts = message.text.strip().split()
        if len(parts) < 2:
            error_msg = """
            ‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ *–∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.

–ü—Ä–∏–º–µ—Ä:
–ê–≤—Ä–∞–∞–º 89161234567 –∏–ª–∏ –°–∞—Ä–∞ +79161234567
            """
            bot.reply_to(message, error_msg, parse_mode='Markdown')
            return

        name = ' '.join(parts[:-1])
        number = parts[-1]

        if not validate_phone(number):
            error_msg = """
            ‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:
- `89161234567`
- `+79161234567`

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:
            """
            bot.reply_to(message, error_msg, parse_mode='Markdown')
            return

        exists = safe_db_execute(
            "SELECT 1 FROM roots WHERE id = ? LIMIT 1",
            (message.from_user.id,),
            fetch=True
        )

        if exists:
            bot.reply_to(message, "‚ÑπÔ∏è –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!", parse_mode='Markdown')
        else:
            success = safe_db_execute(
                "INSERT INTO roots (id, name, number) VALUES (?, ?, ?)",
                (message.from_user.id, name, number)
            )

            if success:
                success_msg = """
                ‚úÖ *–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!*

–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
- *–ò–º—è:* {}
- *–¢–µ–ª–µ—Ñ–æ–Ω:* {}

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! üìû
                """.format(name, number)
                bot.reply_to(message, success_msg, parse_mode='Markdown')
            else:
                bot.reply_to(message, "‚ö†Ô∏è *–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode='Markdown')

        bot.delete_state(message.from_user.id, message.chat.id)
        logger.info(f"Processed roots: {name} {number}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—Ä–Ω–µ–π: {str(e)}", exc_info=True)
        bot.send_message(message.chat.id, "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode='Markdown')
        bot.delete_state(message.from_user.id, message.chat.id)

@bot.message_handler(func=lambda message: is_state(message, DialogStates.waiting_for_commandments))
def process_commandments(message):
    try:
        prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ –µ–≤—Ä–µ–π—Å–∫–∏—Ö –∑–∞–∫–æ–Ω–æ–≤: {message.text}. –û–±—ä—è—Å–Ω–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å."
        response = generate_ai_response(prompt)

        formatted_response = f"""
        ‚ú°Ô∏è *–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å* ‚ú°Ô∏è

{response}

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –∏—Ö! üôè
        """
        bot.send_message(message.chat.id, formatted_response, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–æ–≤–µ–¥–µ–π: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode='Markdown')
        bot.delete_state(message.from_user.id, message.chat.id)

@bot.message_handler(content_types=['text'])
def text(message):
    try:
        bot.delete_state(message.from_user.id, message.chat.id)

        markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton('üìñ –£—Ä–æ–∫–∏ –¢–æ—Ä—ã', callback_data='lessons'),
            types.InlineKeyboardButton('üå≥ –ü–æ–∏—Å–∫ –∫–æ—Ä–Ω–µ–π', callback_data='roots_help'),
            types.InlineKeyboardButton('üõçÔ∏è –ï–≤—Ä–µ–π—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã', callback_data='jewish_goods'),
            types.InlineKeyboardButton('‚ùì –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', callback_data='commandments_help')
        ]
        markup.add(*buttons)

        nav_msg = """
        üîç *–ù–∞–≤–∏–≥–∞—Ü–∏—è*

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞:
        """
        bot.send_message(
            chat_id=message.chat.id,
            text=nav_msg,
            reply_markup=markup,
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è *–û—à–∏–±–∫–∞!* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode='Markdown')

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    bot.infinity_polling()
    logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")